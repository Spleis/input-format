{"version":3,"sources":["../source/input control.js"],"names":["onCut","onPaste","onChange","onKeyDown","event","input","_parse","_format","on_change","setTimeout","format_input_text","undefined","selection","erase_selection","operation","preventDefault","text","value","slice","start","end","caret","operation_applied","formatted"],"mappings":"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","file":"input control.js","sourcesContent":["import edit   from './edit'\nimport parse  from './parse'\nimport format from './format'\n\nimport\n{\n\tgetOperation,\n\tgetSelection,\n\tgetCaretPosition,\n\tsetCaretPosition\n}\nfrom './dom'\n\nexport function onCut(event, input, _parse, _format, on_change)\n{\n\t// The actual cut hasn't happened just yet hence the timeout.\n\tsetTimeout(() => format_input_text(input, _parse, _format, undefined, on_change), 0)\n}\n\nexport function onPaste(event, input, _parse, _format, on_change)\n{\n\tconst selection = getSelection(input)\n\n\t// If selection is made,\n\t// just erase the selected text\n\t// prior to pasting\n\tif (selection)\n\t{\n\t\terase_selection(input, selection)\n\t}\n\n\tformat_input_text(input, _parse, _format, undefined, on_change)\n}\n\nexport function onChange(event, input, _parse, _format, on_change)\n{\n\tformat_input_text(input, _parse, _format, undefined, on_change)\n}\n\n// Intercepts \"Delete\" and \"Backspace\" keys.\n// (hitting \"Delete\" or \"Backspace\" at any caret\n//  position should always result in rasing a digit)\nexport function onKeyDown(event, input, _parse, _format, on_change)\n{\n\tconst operation = getOperation(event)\n\n\tswitch (operation)\n\t{\n\t\tcase 'Delete':\n\t\tcase 'Backspace':\n\t\t\t// Intercept this operation and perform it manually.\n\t\t\tevent.preventDefault()\n\n\t\t\tconst selection = getSelection(input)\n\n\t\t\t// If selection is made,\n\t\t\t// just erase the selected text,\n\t\t\t// and don't apply any more operations to it.\n\t\t\tif (selection)\n\t\t\t{\n\t\t\t\terase_selection(input, selection)\n\t\t\t\treturn format_input_text(input, _parse, _format, undefined, on_change)\n\t\t\t}\n\n\t\t\t// Else, perform the (character erasing) operation manually\n\t\t\treturn format_input_text(input, _parse, _format, operation, on_change)\n\n\t\tdefault:\n\t\t\t// Will be handled when `onChange` fires.\n\t}\n}\n\n/**\n * Erases the selected text inside an `<input/>`.\n * @param  {DOMElement} input\n * @param  {Selection} selection\n */\nfunction erase_selection(input, selection)\n{\n\tlet text = input.value\n\ttext = text.slice(0, selection.start) + text.slice(selection.end)\n\n\tinput.value = text\n\tsetCaretPosition(input, selection.start)\n}\n\n/**\n * Parses and re-formats `<input/>` textual value.\n * E.g. when a user enters something into the `<input/>`\n * that raw input must first be parsed and the re-formatted properly.\n * Is called either after some user input (e.g. entered a character, pasted something)\n * or after the user performed an `operation` (e.g. \"Backspace\", \"Delete\").\n * @param  {DOMElement} input\n * @param  {Function} parse\n * @param  {Function} format\n * @param  {string} [operation] - The operation that triggered `<input/>` textual value change. E.g. \"Backspace\", \"Delete\".\n * @param  {Function} onChange\n */\nfunction format_input_text(input, _parse, _format, operation, on_change)\n{\n\t// Parse `<input/>` textual value.\n\t// Get `value` and `caret` position.\n\tlet { value, caret } = parse(input.value, getCaretPosition(input), _parse)\n\n\t// If a user performed an operation (e.g. \"Backspace\", \"Delete\")\n\t// then apply that operation and get new `value` and `caret` position.\n\tif (operation)\n\t{\n\t\tconst operation_applied = edit(value, caret, operation)\n\n\t\tvalue = operation_applied.value\n\t\tcaret = operation_applied.caret\n\t}\n\n\t// Format the `value`.\n\t// (and reposition the caret accordingly)\n\tconst formatted = format(value, caret, _format)\n\n\tconst text = formatted.text\n\tcaret      = formatted.caret\n\n\t// Set `<input/>` textual value manually\n\t// to prevent React from resetting the caret position\n\t// later inside subsequent `render()`.\n\t// Doesn't work for custom `inputComponent`s for some reason.\n\tinput.value = text\n\t// Position the caret properly.\n\tsetCaretPosition(input, caret)\n\n\t// `<input/>` textual value may have changed,\n\t// so the parsed `value` may have changed too.\n\t// The `value` didn't neccessarily change\n\t// but it might have.\n\ton_change(value)\n}"]}